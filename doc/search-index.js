var searchIndex = {};
searchIndex["gprs"] = {"doc":"","items":[[0,"permutation","gprs","排列组合",null,null],[8,"Permutation","gprs::permutation","求slice内元素的排列组合",null,null],[10,"prev_permutation","","上一个组合, 若没有更多的组合则返回false\n# 用例\n```\nuse gprs::permutation::Permutation;",0,{"inputs":[{"name":"permutation"}],"output":{"name":"bool"}}],[10,"next_permutation","","下一个组合, 若没有更多的组合则返回false\n# 用例\n```\nuse gprs::permutation::Permutation;",0,{"inputs":[{"name":"permutation"}],"output":{"name":"bool"}}],[0,"heap","gprs","堆操作",null,null],[3,"HeapComparator","gprs::heap","用户提供自定义比函数时的堆操作",null,null],[8,"HeapOperation","","",null,null],[10,"compare_by","","提供用户自己的比较函数以选择构造最大堆/最小堆",1,{"inputs":[{"name":"heapoperation"},{"name":"fn"}],"output":{"name":"heapcomparator"}}],[10,"make_heap","","直接构造堆(默认为最大堆)\n# 用例\n```\nuse gprs::heap::HeapOperation;",1,{"inputs":[{"name":"heapoperation"}],"output":null}],[10,"sort_heap","","对堆进行排序(默认为最大堆)\n# 用例\n```\nuse gprs::heap::HeapOperation;",1,{"inputs":[{"name":"heapoperation"}],"output":null}],[10,"push_heap","","将一个末尾加入一个新元素的堆重新构造成堆\n# 用例\n```\nuse gprs::heap::HeapOperation;",1,{"inputs":[{"name":"heapoperation"}],"output":null}],[10,"pop_heap","","将堆根部元素移动到slice末尾, 并将剩下元素构造成堆\n# 用例\n```\nuse gprs::heap::HeapOperation;",1,{"inputs":[{"name":"heapoperation"}],"output":null}],[11,"make_heap","","将一个无序的slice构造成堆",2,{"inputs":[{"name":"heapcomparator"}],"output":null}],[11,"push_heap","","将一个slice构造成堆",2,{"inputs":[{"name":"heapcomparator"}],"output":null}],[11,"pop_heap","","将堆根部元素移动到slice末尾, 并将剩下元素构造成堆\n# 用例\n```\nuse gprs::heap::HeapOperation;",2,{"inputs":[{"name":"heapcomparator"}],"output":null}],[11,"sort_heap","","对已构成堆的slice进行排序\n# 用例\n```\nuse gprs::heap::HeapOperation;",2,{"inputs":[{"name":"heapcomparator"}],"output":null}],[0,"rotate","gprs","序列旋转",null,null],[8,"Rotatable","gprs::rotate","为slice提供旋转操作",null,null],[10,"rotate","","交换[0, mid), [mid, len)\n# 用例\n```\nuse gprs::rotate::Rotatable;",3,{"inputs":[{"name":"rotatable"},{"name":"usize"}],"output":null}]],"paths":[[8,"Permutation"],[8,"HeapOperation"],[3,"HeapComparator"],[8,"Rotatable"]]};
initSearch(searchIndex);
